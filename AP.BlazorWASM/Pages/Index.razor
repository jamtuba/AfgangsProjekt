@page "/"
@using AP.ClassLibrary.Model;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.AspNetCore.Http.Connections

@inject NavigationManager _navManager
@inject IWebAssemblyHostEnvironment _environment

<PageTitle>Index</PageTitle>

<h1>Number of companies: @companies.Count</h1>

<h2>@IsConnected</h2>
<h3></h3>
<h3>App is in @_environment.Environment.ToString()</h3>

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Value</th>
            <th scope="col">Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var companyInfo in companies)
        {
            <tr>
                <td>@companyInfo.CompanyId</td>
                <td>@companyInfo.CompanyName</td>
                <td>@companyInfo.Value</td>
                <td>@companyInfo.Time</td>

            </tr>
        }

    </tbody>
</table>


@code {
    private HubConnection? _hubConnection;
    private List<CompanyInfo> companies = new();

    private List<string> messages = new List<string>();
    private string ErrorMessage = "No Errors";

    protected override async Task OnInitializedAsync()
    {
        await StartHubConnection();

        StartRecieving();
    }

    private async Task StartHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://afgangsprojekt-api.azurewebsites.net/thehub",
            //.WithUrl("https://localhost:7030/testhub",
             options =>
            {
                options.Transports = HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect()
            .Build();


        try
        {
            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {

            ErrorMessage = ex.Message;
        }

        StateHasChanged();
    }

    private void StartRecieving()
    {
        if (_hubConnection?.State == HubConnectionState.Connected)
        {

            _hubConnection.On<List<CompanyInfo>>("RecieveStockData", (newCompanies) =>
            {
                if (newCompanies.Any())
                {
                    companies.Add(newCompanies[1]!);
                    StateHasChanged();
                }
            });
        }
    }

    public string IsConnected =>
        _hubConnection?.State.ToString()!;


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
